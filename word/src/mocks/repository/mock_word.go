// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/repository/word.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/FPNL/i18n-town/src/core/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIWordRepo is a mock of IWordRepo interface.
type MockIWordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWordRepoMockRecorder
}

// MockIWordRepoMockRecorder is the mock recorder for MockIWordRepo.
type MockIWordRepoMockRecorder struct {
	mock *MockIWordRepo
}

// NewMockIWordRepo creates a new mock instance.
func NewMockIWordRepo(ctrl *gomock.Controller) *MockIWordRepo {
	mock := &MockIWordRepo{ctrl: ctrl}
	mock.recorder = &MockIWordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWordRepo) EXPECT() *MockIWordRepoMockRecorder {
	return m.recorder
}

// DeleteByIds mocks base method.
func (m *MockIWordRepo) DeleteByIds(arg0 context.Context, arg1 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIds indicates an expected call of DeleteByIds.
func (mr *MockIWordRepoMockRecorder) DeleteByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIds", reflect.TypeOf((*MockIWordRepo)(nil).DeleteByIds), arg0, arg1)
}

// Insert mocks base method.
func (m *MockIWordRepo) Insert(arg0 context.Context, arg1 *entity.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIWordRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIWordRepo)(nil).Insert), arg0, arg1)
}

// SelectAll mocks base method.
func (m *MockIWordRepo) SelectAll(arg0 context.Context) ([]entity.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", arg0)
	ret0, _ := ret[0].([]entity.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockIWordRepoMockRecorder) SelectAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockIWordRepo)(nil).SelectAll), arg0)
}

// Truncate mocks base method.
func (m *MockIWordRepo) Truncate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockIWordRepoMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockIWordRepo)(nil).Truncate), arg0)
}

// UpdateWords mocks base method.
func (m *MockIWordRepo) UpdateWords(arg0 context.Context, arg1 []entity.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWords indicates an expected call of UpdateWords.
func (mr *MockIWordRepoMockRecorder) UpdateWords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWords", reflect.TypeOf((*MockIWordRepo)(nil).UpdateWords), arg0, arg1)
}
