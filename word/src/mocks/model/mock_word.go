// Code generated by MockGen. DO NOT EDIT.
// Source: src/core/model/word.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	entity "github.com/FPNL/i18n-town/src/core/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIWord is a mock of IWord interface.
type MockIWord struct {
	ctrl     *gomock.Controller
	recorder *MockIWordMockRecorder
}

// MockIWordMockRecorder is the mock recorder for MockIWord.
type MockIWordMockRecorder struct {
	mock *MockIWord
}

// NewMockIWord creates a new mock instance.
func NewMockIWord(ctrl *gomock.Controller) *MockIWord {
	mock := &MockIWord{ctrl: ctrl}
	mock.recorder = &MockIWordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWord) EXPECT() *MockIWordMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockIWord) DeleteById(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIWordMockRecorder) DeleteById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIWord)(nil).DeleteById), arg0, arg1)
}

// Exist mocks base method.
func (m *MockIWord) Exist(arg0 context.Context, arg1 *entity.Word) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockIWordMockRecorder) Exist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockIWord)(nil).Exist), arg0, arg1)
}

// Insert mocks base method.
func (m *MockIWord) Insert(arg0 context.Context, arg1 entity.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIWordMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIWord)(nil).Insert), arg0, arg1)
}

// SelectAll mocks base method.
func (m *MockIWord) SelectAll(arg0 context.Context) ([]entity.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", arg0)
	ret0, _ := ret[0].([]entity.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockIWordMockRecorder) SelectAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockIWord)(nil).SelectAll), arg0)
}

// Truncate mocks base method.
func (m *MockIWord) Truncate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockIWordMockRecorder) Truncate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockIWord)(nil).Truncate), arg0)
}

// UpdateById mocks base method.
func (m *MockIWord) UpdateById(arg0 context.Context, arg1 *entity.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockIWordMockRecorder) UpdateById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockIWord)(nil).UpdateById), arg0, arg1)
}
